import base64
import six
import uuid
from mimetypes import guess_extension, guess_type
import io
from api import app
import boto3
import logging
import botocore.exceptions

BUCKET = app.config["S3_BUCKET_NAME"]


def parse_graduation_date(date):
    """ Parses graduation date string generated by frontend into suitable format

        Parameters
        ----------
        date : str
            string of user inputted graduation date.

        Returns
        -------
        string
            string of graduation date only with Month and Year.
    """

    date_splitted = date.split("-")
    year = date_splitted[0]
    month = date_splitted[1]
    months = {
        "01": "January",
        "02": "February",
        "03": "March",
        "04": "April",
        "05": "May",
        "06": "June",
        "07": "July",
        "08": "August",
        "09": "September",
        "10": "October",
        "11": "November",
        "12": "December"
    }

    return months[month] + " " + year


def get_file_extension(data):
    """ Helper function to get file extension of base64 file

        Parameters
        ----------
        date : str
            base64 representation of a file/data.

        Returns
        -------
        string
            extension of the base64 file/data.
    """
    extension = (data.split(";")[0]).split(":")[-1]
    return extension


def decode_and_upload_base64_file(data, file_name):
    """ Function to decode base64 files

        Parameters
        ----------
        date : str
            string of user inputted graduation date.

        Returns
        -------
        string
            string of graduation date only with Month and Year.
    """
    url_data = upload_base64_file(data, BUCKET, file_name)
    return url_data


def upload_base64_file(data, bucket_name, file_name):
    """ Helper function to decode and upload base64 files

        Parameters
        ----------
        data : str
            base64 data of file

        bucket_name : str
            name of S3 bucket.

        file_name : str
            name of file + path to be saved within s3.

        Returns
        -------
        string
            URL of file within s3.
    """
    logging.info("Retrieving base64 data of file.")
    file_extension = get_file_extension(data)
    base64_data = data.split(",")[-1]

    try:
        logging.info("Decoding base64 data into binary data")
        decoded_file = base64.b64decode(base64_data)
    except Exception as e:
        logging.error(e)

    try:
        logging.info("Uploading file into s3 bucket.")
        client = boto3.client('s3')
        client.upload_fileobj(
            io.BytesIO(decoded_file),
            bucket_name,
            file_name,
            ExtraArgs={
                'ACL': 'public-read',
                "ContentType": file_extension
            }
        )
    except Exception as e:
        raise e

    return f"https://{bucket_name}.s3.amazonaws.com/{file_name}"
